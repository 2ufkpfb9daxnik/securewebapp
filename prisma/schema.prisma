    generator client {
      provider = "prisma-client-js"
    }

    datasource db {
      provider = "sqlite"
      url      = env("DATABASE_URL")
    }

    model User {
      id                  String         @id @default(cuid())
      email               String         @unique
      password            String
  failedLoginAttempts Int            @default(0) // ログイン失敗した回数（アカウントロック用）
  lockUntil           DateTime?      // アカウントがロックされてる間の終了時刻
  lastLoginAttemptAt  DateTime?      // 最後にログイン試した時間（連続ログイン制限用）
      createdAt           DateTime       @default(now())
      updatedAt           DateTime       @updatedAt

  // 他のモデルとのつながり
      accounts       Account[]
      sessions       Session[]
      loginHistories LoginHistory[]
    }

    model LoginHistory {
      id        String   @id @default(cuid())
  ipAddress String?  // ログインしたときのIPアドレス
  userAgent String?  // ログイン時のブラウザや端末の情報
      loginAt   DateTime @default(now())
      user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
      userId    String
    }

  // --- Auth.jsで使うやつ ---

    model Account {
      id                String  @id @default(cuid())
      userId            String
      type              String
      provider          String
      providerAccountId String
      refresh_token     String?
      access_token      String?
      expires_at        Int?
      token_type        String?
      scope             String?
      id_token          String?
      session_state     String?

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@unique([provider, providerAccountId])
    }

    model Session {
      id           String   @id @default(cuid())
      sessionToken String   @unique
      userId       String
      expires      DateTime
      user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    }

    model VerificationToken {
      identifier String
      token      String   @unique
      expires    DateTime

      @@unique([identifier, token])
    }
    
